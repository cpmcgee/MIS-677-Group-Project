#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GroupProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Group2")]
	public partial class DBClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertEQUIPMENTREQUEST(EQUIPMENTREQUEST instance);
    partial void UpdateEQUIPMENTREQUEST(EQUIPMENTREQUEST instance);
    partial void DeleteEQUIPMENTREQUEST(EQUIPMENTREQUEST instance);
    partial void InsertHARDWARE(HARDWARE instance);
    partial void UpdateHARDWARE(HARDWARE instance);
    partial void DeleteHARDWARE(HARDWARE instance);
    partial void InsertNEWHIRE(NEWHIRE instance);
    partial void UpdateNEWHIRE(NEWHIRE instance);
    partial void DeleteNEWHIRE(NEWHIRE instance);
    partial void InsertSOFTWARE(SOFTWARE instance);
    partial void UpdateSOFTWARE(SOFTWARE instance);
    partial void DeleteSOFTWARE(SOFTWARE instance);
    partial void InsertSUPERVISOR(SUPERVISOR instance);
    partial void UpdateSUPERVISOR(SUPERVISOR instance);
    partial void DeleteSUPERVISOR(SUPERVISOR instance);
    #endregion
		
		public DBClassesDataContext() : 
				base(global::GroupProject.Properties.Settings.Default.Group2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<EQUIPMENTREQUEST> EQUIPMENTREQUESTs
		{
			get
			{
				return this.GetTable<EQUIPMENTREQUEST>();
			}
		}
		
		public System.Data.Linq.Table<HARDWARE> HARDWAREs
		{
			get
			{
				return this.GetTable<HARDWARE>();
			}
		}
		
		public System.Data.Linq.Table<NEWHIRE> NEWHIREs
		{
			get
			{
				return this.GetTable<NEWHIRE>();
			}
		}
		
		public System.Data.Linq.Table<SOFTWARE> SOFTWAREs
		{
			get
			{
				return this.GetTable<SOFTWARE>();
			}
		}
		
		public System.Data.Linq.Table<SUPERVISOR> SUPERVISORs
		{
			get
			{
				return this.GetTable<SUPERVISOR>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EMPLOYEE_NUM;
		
		private string _FIRST_NAME;
		
		private string _LAST_NAME;
		
		private string _GENDER;
		
		private System.Nullable<System.DateTime> _DATE_OF_BIRTH;
		
		private string _TITLE;
		
		private EntitySet<USER> _USERs;
		
		private EntitySet<NEWHIRE> _NEWHIREs;
		
		private EntitySet<SUPERVISOR> _SUPERVISORs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMPLOYEE_NUMChanging(int value);
    partial void OnEMPLOYEE_NUMChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnDATE_OF_BIRTHChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_OF_BIRTHChanged();
    partial void OnTITLEChanging(string value);
    partial void OnTITLEChanged();
    #endregion
		
		public EMPLOYEE()
		{
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			this._NEWHIREs = new EntitySet<NEWHIRE>(new Action<NEWHIRE>(this.attach_NEWHIREs), new Action<NEWHIRE>(this.detach_NEWHIREs));
			this._SUPERVISORs = new EntitySet<SUPERVISOR>(new Action<SUPERVISOR>(this.attach_SUPERVISORs), new Action<SUPERVISOR>(this.detach_SUPERVISORs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_NUM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EMPLOYEE_NUM
		{
			get
			{
				return this._EMPLOYEE_NUM;
			}
			set
			{
				if ((this._EMPLOYEE_NUM != value))
				{
					this.OnEMPLOYEE_NUMChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_NUM = value;
					this.SendPropertyChanged("EMPLOYEE_NUM");
					this.OnEMPLOYEE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRST_NAME", DbType="VarChar(25)")]
		public string FIRST_NAME
		{
			get
			{
				return this._FIRST_NAME;
			}
			set
			{
				if ((this._FIRST_NAME != value))
				{
					this.OnFIRST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRST_NAME = value;
					this.SendPropertyChanged("FIRST_NAME");
					this.OnFIRST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_NAME", DbType="VarChar(25)")]
		public string LAST_NAME
		{
			get
			{
				return this._LAST_NAME;
			}
			set
			{
				if ((this._LAST_NAME != value))
				{
					this.OnLAST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LAST_NAME = value;
					this.SendPropertyChanged("LAST_NAME");
					this.OnLAST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="VarChar(15)")]
		public string GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_OF_BIRTH", DbType="Date")]
		public System.Nullable<System.DateTime> DATE_OF_BIRTH
		{
			get
			{
				return this._DATE_OF_BIRTH;
			}
			set
			{
				if ((this._DATE_OF_BIRTH != value))
				{
					this.OnDATE_OF_BIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATE_OF_BIRTH = value;
					this.SendPropertyChanged("DATE_OF_BIRTH");
					this.OnDATE_OF_BIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TITLE", DbType="VarChar(30)")]
		public string TITLE
		{
			get
			{
				return this._TITLE;
			}
			set
			{
				if ((this._TITLE != value))
				{
					this.OnTITLEChanging(value);
					this.SendPropertyChanging();
					this._TITLE = value;
					this.SendPropertyChanged("TITLE");
					this.OnTITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_USER", Storage="_USERs", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_NEWHIRE", Storage="_NEWHIREs", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM")]
		public EntitySet<NEWHIRE> NEWHIREs
		{
			get
			{
				return this._NEWHIREs;
			}
			set
			{
				this._NEWHIREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_SUPERVISOR", Storage="_SUPERVISORs", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM")]
		public EntitySet<SUPERVISOR> SUPERVISORs
		{
			get
			{
				return this._SUPERVISORs;
			}
			set
			{
				this._SUPERVISORs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_NEWHIREs(NEWHIRE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_NEWHIREs(NEWHIRE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_SUPERVISORs(SUPERVISOR entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_SUPERVISORs(SUPERVISOR entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _USER_NUM;
		
		private int _EMPLOYEE_NUM;
		
		private string _USER_ID;
		
		private string _PASSWORD;
		
		private System.Nullable<bool> _ACCESS_LEVEL;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_NUMChanging(int value);
    partial void OnUSER_NUMChanged();
    partial void OnEMPLOYEE_NUMChanging(int value);
    partial void OnEMPLOYEE_NUMChanged();
    partial void OnUSER_IDChanging(string value);
    partial void OnUSER_IDChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    partial void OnACCESS_LEVELChanging(System.Nullable<bool> value);
    partial void OnACCESS_LEVELChanged();
    #endregion
		
		public USER()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_NUM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int USER_NUM
		{
			get
			{
				return this._USER_NUM;
			}
			set
			{
				if ((this._USER_NUM != value))
				{
					this.OnUSER_NUMChanging(value);
					this.SendPropertyChanging();
					this._USER_NUM = value;
					this.SendPropertyChanged("USER_NUM");
					this.OnUSER_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_NUM", DbType="Int NOT NULL")]
		public int EMPLOYEE_NUM
		{
			get
			{
				return this._EMPLOYEE_NUM;
			}
			set
			{
				if ((this._EMPLOYEE_NUM != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_NUMChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_NUM = value;
					this.SendPropertyChanged("EMPLOYEE_NUM");
					this.OnEMPLOYEE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_ID", DbType="VarChar(25)")]
		public string USER_ID
		{
			get
			{
				return this._USER_ID;
			}
			set
			{
				if ((this._USER_ID != value))
				{
					this.OnUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_ID = value;
					this.SendPropertyChanged("USER_ID");
					this.OnUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="VarChar(30)")]
		public string PASSWORD
		{
			get
			{
				return this._PASSWORD;
			}
			set
			{
				if ((this._PASSWORD != value))
				{
					this.OnPASSWORDChanging(value);
					this.SendPropertyChanging();
					this._PASSWORD = value;
					this.SendPropertyChanged("PASSWORD");
					this.OnPASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCESS_LEVEL", DbType="Bit")]
		public System.Nullable<bool> ACCESS_LEVEL
		{
			get
			{
				return this._ACCESS_LEVEL;
			}
			set
			{
				if ((this._ACCESS_LEVEL != value))
				{
					this.OnACCESS_LEVELChanging(value);
					this.SendPropertyChanging();
					this._ACCESS_LEVEL = value;
					this.SendPropertyChanged("ACCESS_LEVEL");
					this.OnACCESS_LEVELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_USER", Storage="_EMPLOYEE", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._EMPLOYEE_NUM = value.EMPLOYEE_NUM;
					}
					else
					{
						this._EMPLOYEE_NUM = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EQUIPMENTREQUEST")]
	public partial class EQUIPMENTREQUEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EQUIPMENT_REQUEST_NUM;
		
		private int _NEWHIRE_NUM;
		
		private System.Nullable<int> _STATUS;
		
		private System.Nullable<int> _APPROVED_BY;
		
		private System.Nullable<int> _REQUESTED_BY;
		
		private System.Nullable<System.DateTime> _COMPLETED_ON;
		
		private System.Nullable<System.DateTime> _REQUESTED_ON;
		
		private EntitySet<HARDWARE> _HARDWAREs;
		
		private EntitySet<SOFTWARE> _SOFTWAREs;
		
		private EntityRef<NEWHIRE> _NEWHIRE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEQUIPMENT_REQUEST_NUMChanging(int value);
    partial void OnEQUIPMENT_REQUEST_NUMChanged();
    partial void OnNEWHIRE_NUMChanging(int value);
    partial void OnNEWHIRE_NUMChanged();
    partial void OnSTATUSChanging(System.Nullable<int> value);
    partial void OnSTATUSChanged();
    partial void OnAPPROVED_BYChanging(System.Nullable<int> value);
    partial void OnAPPROVED_BYChanged();
    partial void OnREQUESTED_BYChanging(System.Nullable<int> value);
    partial void OnREQUESTED_BYChanged();
    partial void OnCOMPLETED_ONChanging(System.Nullable<System.DateTime> value);
    partial void OnCOMPLETED_ONChanged();
    partial void OnREQUESTED_ONChanging(System.Nullable<System.DateTime> value);
    partial void OnREQUESTED_ONChanged();
    #endregion
		
		public EQUIPMENTREQUEST()
		{
			this._HARDWAREs = new EntitySet<HARDWARE>(new Action<HARDWARE>(this.attach_HARDWAREs), new Action<HARDWARE>(this.detach_HARDWAREs));
			this._SOFTWAREs = new EntitySet<SOFTWARE>(new Action<SOFTWARE>(this.attach_SOFTWAREs), new Action<SOFTWARE>(this.detach_SOFTWAREs));
			this._NEWHIRE = default(EntityRef<NEWHIRE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EQUIPMENT_REQUEST_NUM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EQUIPMENT_REQUEST_NUM
		{
			get
			{
				return this._EQUIPMENT_REQUEST_NUM;
			}
			set
			{
				if ((this._EQUIPMENT_REQUEST_NUM != value))
				{
					this.OnEQUIPMENT_REQUEST_NUMChanging(value);
					this.SendPropertyChanging();
					this._EQUIPMENT_REQUEST_NUM = value;
					this.SendPropertyChanged("EQUIPMENT_REQUEST_NUM");
					this.OnEQUIPMENT_REQUEST_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NEWHIRE_NUM", DbType="Int NOT NULL")]
		public int NEWHIRE_NUM
		{
			get
			{
				return this._NEWHIRE_NUM;
			}
			set
			{
				if ((this._NEWHIRE_NUM != value))
				{
					if (this._NEWHIRE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNEWHIRE_NUMChanging(value);
					this.SendPropertyChanging();
					this._NEWHIRE_NUM = value;
					this.SendPropertyChanged("NEWHIRE_NUM");
					this.OnNEWHIRE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="Int")]
		public System.Nullable<int> STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APPROVED_BY", DbType="Int")]
		public System.Nullable<int> APPROVED_BY
		{
			get
			{
				return this._APPROVED_BY;
			}
			set
			{
				if ((this._APPROVED_BY != value))
				{
					this.OnAPPROVED_BYChanging(value);
					this.SendPropertyChanging();
					this._APPROVED_BY = value;
					this.SendPropertyChanged("APPROVED_BY");
					this.OnAPPROVED_BYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REQUESTED_BY", DbType="Int")]
		public System.Nullable<int> REQUESTED_BY
		{
			get
			{
				return this._REQUESTED_BY;
			}
			set
			{
				if ((this._REQUESTED_BY != value))
				{
					this.OnREQUESTED_BYChanging(value);
					this.SendPropertyChanging();
					this._REQUESTED_BY = value;
					this.SendPropertyChanged("REQUESTED_BY");
					this.OnREQUESTED_BYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMPLETED_ON", DbType="Date")]
		public System.Nullable<System.DateTime> COMPLETED_ON
		{
			get
			{
				return this._COMPLETED_ON;
			}
			set
			{
				if ((this._COMPLETED_ON != value))
				{
					this.OnCOMPLETED_ONChanging(value);
					this.SendPropertyChanging();
					this._COMPLETED_ON = value;
					this.SendPropertyChanged("COMPLETED_ON");
					this.OnCOMPLETED_ONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REQUESTED_ON", DbType="Date")]
		public System.Nullable<System.DateTime> REQUESTED_ON
		{
			get
			{
				return this._REQUESTED_ON;
			}
			set
			{
				if ((this._REQUESTED_ON != value))
				{
					this.OnREQUESTED_ONChanging(value);
					this.SendPropertyChanging();
					this._REQUESTED_ON = value;
					this.SendPropertyChanged("REQUESTED_ON");
					this.OnREQUESTED_ONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EQUIPMENTREQUEST_HARDWARE", Storage="_HARDWAREs", ThisKey="EQUIPMENT_REQUEST_NUM", OtherKey="EQUIPMENT_REQUEST_NUM")]
		public EntitySet<HARDWARE> HARDWAREs
		{
			get
			{
				return this._HARDWAREs;
			}
			set
			{
				this._HARDWAREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EQUIPMENTREQUEST_SOFTWARE", Storage="_SOFTWAREs", ThisKey="EQUIPMENT_REQUEST_NUM", OtherKey="EQUIPMENT_REQUEST_NUM")]
		public EntitySet<SOFTWARE> SOFTWAREs
		{
			get
			{
				return this._SOFTWAREs;
			}
			set
			{
				this._SOFTWAREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWHIRE_EQUIPMENTREQUEST", Storage="_NEWHIRE", ThisKey="NEWHIRE_NUM", OtherKey="NEWHIRE_NUM", IsForeignKey=true)]
		public NEWHIRE NEWHIRE
		{
			get
			{
				return this._NEWHIRE.Entity;
			}
			set
			{
				NEWHIRE previousValue = this._NEWHIRE.Entity;
				if (((previousValue != value) 
							|| (this._NEWHIRE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NEWHIRE.Entity = null;
						previousValue.EQUIPMENTREQUESTs.Remove(this);
					}
					this._NEWHIRE.Entity = value;
					if ((value != null))
					{
						value.EQUIPMENTREQUESTs.Add(this);
						this._NEWHIRE_NUM = value.NEWHIRE_NUM;
					}
					else
					{
						this._NEWHIRE_NUM = default(int);
					}
					this.SendPropertyChanged("NEWHIRE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HARDWAREs(HARDWARE entity)
		{
			this.SendPropertyChanging();
			entity.EQUIPMENTREQUEST = this;
		}
		
		private void detach_HARDWAREs(HARDWARE entity)
		{
			this.SendPropertyChanging();
			entity.EQUIPMENTREQUEST = null;
		}
		
		private void attach_SOFTWAREs(SOFTWARE entity)
		{
			this.SendPropertyChanging();
			entity.EQUIPMENTREQUEST = this;
		}
		
		private void detach_SOFTWAREs(SOFTWARE entity)
		{
			this.SendPropertyChanging();
			entity.EQUIPMENTREQUEST = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HARDWARE")]
	public partial class HARDWARE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HARDWARE_UID;
		
		private int _EQUIPMENT_REQUEST_NUM;
		
		private System.Nullable<int> _HARDWARE_OPTION;
		
		private System.Nullable<bool> _USED;
		
		private EntityRef<EQUIPMENTREQUEST> _EQUIPMENTREQUEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHARDWARE_UIDChanging(int value);
    partial void OnHARDWARE_UIDChanged();
    partial void OnEQUIPMENT_REQUEST_NUMChanging(int value);
    partial void OnEQUIPMENT_REQUEST_NUMChanged();
    partial void OnHARDWARE_OPTIONChanging(System.Nullable<int> value);
    partial void OnHARDWARE_OPTIONChanged();
    partial void OnUSEDChanging(System.Nullable<bool> value);
    partial void OnUSEDChanged();
    #endregion
		
		public HARDWARE()
		{
			this._EQUIPMENTREQUEST = default(EntityRef<EQUIPMENTREQUEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HARDWARE_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HARDWARE_UID
		{
			get
			{
				return this._HARDWARE_UID;
			}
			set
			{
				if ((this._HARDWARE_UID != value))
				{
					this.OnHARDWARE_UIDChanging(value);
					this.SendPropertyChanging();
					this._HARDWARE_UID = value;
					this.SendPropertyChanged("HARDWARE_UID");
					this.OnHARDWARE_UIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EQUIPMENT_REQUEST_NUM", DbType="Int NOT NULL")]
		public int EQUIPMENT_REQUEST_NUM
		{
			get
			{
				return this._EQUIPMENT_REQUEST_NUM;
			}
			set
			{
				if ((this._EQUIPMENT_REQUEST_NUM != value))
				{
					if (this._EQUIPMENTREQUEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEQUIPMENT_REQUEST_NUMChanging(value);
					this.SendPropertyChanging();
					this._EQUIPMENT_REQUEST_NUM = value;
					this.SendPropertyChanged("EQUIPMENT_REQUEST_NUM");
					this.OnEQUIPMENT_REQUEST_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HARDWARE_OPTION", DbType="Int")]
		public System.Nullable<int> HARDWARE_OPTION
		{
			get
			{
				return this._HARDWARE_OPTION;
			}
			set
			{
				if ((this._HARDWARE_OPTION != value))
				{
					this.OnHARDWARE_OPTIONChanging(value);
					this.SendPropertyChanging();
					this._HARDWARE_OPTION = value;
					this.SendPropertyChanged("HARDWARE_OPTION");
					this.OnHARDWARE_OPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USED", DbType="Bit")]
		public System.Nullable<bool> USED
		{
			get
			{
				return this._USED;
			}
			set
			{
				if ((this._USED != value))
				{
					this.OnUSEDChanging(value);
					this.SendPropertyChanging();
					this._USED = value;
					this.SendPropertyChanged("USED");
					this.OnUSEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EQUIPMENTREQUEST_HARDWARE", Storage="_EQUIPMENTREQUEST", ThisKey="EQUIPMENT_REQUEST_NUM", OtherKey="EQUIPMENT_REQUEST_NUM", IsForeignKey=true)]
		public EQUIPMENTREQUEST EQUIPMENTREQUEST
		{
			get
			{
				return this._EQUIPMENTREQUEST.Entity;
			}
			set
			{
				EQUIPMENTREQUEST previousValue = this._EQUIPMENTREQUEST.Entity;
				if (((previousValue != value) 
							|| (this._EQUIPMENTREQUEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EQUIPMENTREQUEST.Entity = null;
						previousValue.HARDWAREs.Remove(this);
					}
					this._EQUIPMENTREQUEST.Entity = value;
					if ((value != null))
					{
						value.HARDWAREs.Add(this);
						this._EQUIPMENT_REQUEST_NUM = value.EQUIPMENT_REQUEST_NUM;
					}
					else
					{
						this._EQUIPMENT_REQUEST_NUM = default(int);
					}
					this.SendPropertyChanged("EQUIPMENTREQUEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NEWHIRE")]
	public partial class NEWHIRE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NEWHIRE_NUM;
		
		private int _EMPLOYEE_NUM;
		
		private int _SUPERVISOR_NUM;
		
		private string _FIRSTNAME;
		
		private string _LASTNAME;
		
		private string _GENDER;
		
		private System.Nullable<System.DateTime> _DATE_OF_BIRTH;
		
		private System.Nullable<bool> _BACKGROUND_PASSED;
		
		private System.Nullable<bool> _IS_HIRED;
		
		private EntitySet<EQUIPMENTREQUEST> _EQUIPMENTREQUESTs;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
		private EntityRef<SUPERVISOR> _SUPERVISOR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNEWHIRE_NUMChanging(int value);
    partial void OnNEWHIRE_NUMChanged();
    partial void OnEMPLOYEE_NUMChanging(int value);
    partial void OnEMPLOYEE_NUMChanged();
    partial void OnSUPERVISOR_NUMChanging(int value);
    partial void OnSUPERVISOR_NUMChanged();
    partial void OnFIRSTNAMEChanging(string value);
    partial void OnFIRSTNAMEChanged();
    partial void OnLASTNAMEChanging(string value);
    partial void OnLASTNAMEChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnDATE_OF_BIRTHChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_OF_BIRTHChanged();
    partial void OnBACKGROUND_PASSEDChanging(System.Nullable<bool> value);
    partial void OnBACKGROUND_PASSEDChanged();
    partial void OnIS_HIREDChanging(System.Nullable<bool> value);
    partial void OnIS_HIREDChanged();
    #endregion
		
		public NEWHIRE()
		{
			this._EQUIPMENTREQUESTs = new EntitySet<EQUIPMENTREQUEST>(new Action<EQUIPMENTREQUEST>(this.attach_EQUIPMENTREQUESTs), new Action<EQUIPMENTREQUEST>(this.detach_EQUIPMENTREQUESTs));
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			this._SUPERVISOR = default(EntityRef<SUPERVISOR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NEWHIRE_NUM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NEWHIRE_NUM
		{
			get
			{
				return this._NEWHIRE_NUM;
			}
			set
			{
				if ((this._NEWHIRE_NUM != value))
				{
					this.OnNEWHIRE_NUMChanging(value);
					this.SendPropertyChanging();
					this._NEWHIRE_NUM = value;
					this.SendPropertyChanged("NEWHIRE_NUM");
					this.OnNEWHIRE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_NUM", DbType="Int NOT NULL")]
		public int EMPLOYEE_NUM
		{
			get
			{
				return this._EMPLOYEE_NUM;
			}
			set
			{
				if ((this._EMPLOYEE_NUM != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_NUMChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_NUM = value;
					this.SendPropertyChanged("EMPLOYEE_NUM");
					this.OnEMPLOYEE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUPERVISOR_NUM", DbType="Int NOT NULL")]
		public int SUPERVISOR_NUM
		{
			get
			{
				return this._SUPERVISOR_NUM;
			}
			set
			{
				if ((this._SUPERVISOR_NUM != value))
				{
					if (this._SUPERVISOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUPERVISOR_NUMChanging(value);
					this.SendPropertyChanging();
					this._SUPERVISOR_NUM = value;
					this.SendPropertyChanged("SUPERVISOR_NUM");
					this.OnSUPERVISOR_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRSTNAME", DbType="VarChar(25)")]
		public string FIRSTNAME
		{
			get
			{
				return this._FIRSTNAME;
			}
			set
			{
				if ((this._FIRSTNAME != value))
				{
					this.OnFIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRSTNAME = value;
					this.SendPropertyChanged("FIRSTNAME");
					this.OnFIRSTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTNAME", DbType="VarChar(25)")]
		public string LASTNAME
		{
			get
			{
				return this._LASTNAME;
			}
			set
			{
				if ((this._LASTNAME != value))
				{
					this.OnLASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._LASTNAME = value;
					this.SendPropertyChanged("LASTNAME");
					this.OnLASTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="VarChar(15)")]
		public string GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_OF_BIRTH", DbType="Date")]
		public System.Nullable<System.DateTime> DATE_OF_BIRTH
		{
			get
			{
				return this._DATE_OF_BIRTH;
			}
			set
			{
				if ((this._DATE_OF_BIRTH != value))
				{
					this.OnDATE_OF_BIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATE_OF_BIRTH = value;
					this.SendPropertyChanged("DATE_OF_BIRTH");
					this.OnDATE_OF_BIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BACKGROUND_PASSED", DbType="Bit")]
		public System.Nullable<bool> BACKGROUND_PASSED
		{
			get
			{
				return this._BACKGROUND_PASSED;
			}
			set
			{
				if ((this._BACKGROUND_PASSED != value))
				{
					this.OnBACKGROUND_PASSEDChanging(value);
					this.SendPropertyChanging();
					this._BACKGROUND_PASSED = value;
					this.SendPropertyChanged("BACKGROUND_PASSED");
					this.OnBACKGROUND_PASSEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_HIRED", DbType="Bit")]
		public System.Nullable<bool> IS_HIRED
		{
			get
			{
				return this._IS_HIRED;
			}
			set
			{
				if ((this._IS_HIRED != value))
				{
					this.OnIS_HIREDChanging(value);
					this.SendPropertyChanging();
					this._IS_HIRED = value;
					this.SendPropertyChanged("IS_HIRED");
					this.OnIS_HIREDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NEWHIRE_EQUIPMENTREQUEST", Storage="_EQUIPMENTREQUESTs", ThisKey="NEWHIRE_NUM", OtherKey="NEWHIRE_NUM")]
		public EntitySet<EQUIPMENTREQUEST> EQUIPMENTREQUESTs
		{
			get
			{
				return this._EQUIPMENTREQUESTs;
			}
			set
			{
				this._EQUIPMENTREQUESTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_NEWHIRE", Storage="_EMPLOYEE", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.NEWHIREs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.NEWHIREs.Add(this);
						this._EMPLOYEE_NUM = value.EMPLOYEE_NUM;
					}
					else
					{
						this._EMPLOYEE_NUM = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPERVISOR_NEWHIRE", Storage="_SUPERVISOR", ThisKey="SUPERVISOR_NUM", OtherKey="EMPLOYEE_NUM", IsForeignKey=true)]
		public SUPERVISOR SUPERVISOR
		{
			get
			{
				return this._SUPERVISOR.Entity;
			}
			set
			{
				SUPERVISOR previousValue = this._SUPERVISOR.Entity;
				if (((previousValue != value) 
							|| (this._SUPERVISOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUPERVISOR.Entity = null;
						previousValue.NEWHIREs.Remove(this);
					}
					this._SUPERVISOR.Entity = value;
					if ((value != null))
					{
						value.NEWHIREs.Add(this);
						this._SUPERVISOR_NUM = value.EMPLOYEE_NUM;
					}
					else
					{
						this._SUPERVISOR_NUM = default(int);
					}
					this.SendPropertyChanged("SUPERVISOR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EQUIPMENTREQUESTs(EQUIPMENTREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.NEWHIRE = this;
		}
		
		private void detach_EQUIPMENTREQUESTs(EQUIPMENTREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.NEWHIRE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SOFTWARE")]
	public partial class SOFTWARE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SOFTWARE_UID;
		
		private int _EQUIPMENT_REQUEST_NUM;
		
		private System.Nullable<int> _SOFTWARE_OPTION;
		
		private System.Nullable<bool> _USED;
		
		private EntityRef<EQUIPMENTREQUEST> _EQUIPMENTREQUEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSOFTWARE_UIDChanging(int value);
    partial void OnSOFTWARE_UIDChanged();
    partial void OnEQUIPMENT_REQUEST_NUMChanging(int value);
    partial void OnEQUIPMENT_REQUEST_NUMChanged();
    partial void OnSOFTWARE_OPTIONChanging(System.Nullable<int> value);
    partial void OnSOFTWARE_OPTIONChanged();
    partial void OnUSEDChanging(System.Nullable<bool> value);
    partial void OnUSEDChanged();
    #endregion
		
		public SOFTWARE()
		{
			this._EQUIPMENTREQUEST = default(EntityRef<EQUIPMENTREQUEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOFTWARE_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SOFTWARE_UID
		{
			get
			{
				return this._SOFTWARE_UID;
			}
			set
			{
				if ((this._SOFTWARE_UID != value))
				{
					this.OnSOFTWARE_UIDChanging(value);
					this.SendPropertyChanging();
					this._SOFTWARE_UID = value;
					this.SendPropertyChanged("SOFTWARE_UID");
					this.OnSOFTWARE_UIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EQUIPMENT_REQUEST_NUM", DbType="Int NOT NULL")]
		public int EQUIPMENT_REQUEST_NUM
		{
			get
			{
				return this._EQUIPMENT_REQUEST_NUM;
			}
			set
			{
				if ((this._EQUIPMENT_REQUEST_NUM != value))
				{
					if (this._EQUIPMENTREQUEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEQUIPMENT_REQUEST_NUMChanging(value);
					this.SendPropertyChanging();
					this._EQUIPMENT_REQUEST_NUM = value;
					this.SendPropertyChanged("EQUIPMENT_REQUEST_NUM");
					this.OnEQUIPMENT_REQUEST_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOFTWARE_OPTION", DbType="Int")]
		public System.Nullable<int> SOFTWARE_OPTION
		{
			get
			{
				return this._SOFTWARE_OPTION;
			}
			set
			{
				if ((this._SOFTWARE_OPTION != value))
				{
					this.OnSOFTWARE_OPTIONChanging(value);
					this.SendPropertyChanging();
					this._SOFTWARE_OPTION = value;
					this.SendPropertyChanged("SOFTWARE_OPTION");
					this.OnSOFTWARE_OPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USED", DbType="Bit")]
		public System.Nullable<bool> USED
		{
			get
			{
				return this._USED;
			}
			set
			{
				if ((this._USED != value))
				{
					this.OnUSEDChanging(value);
					this.SendPropertyChanging();
					this._USED = value;
					this.SendPropertyChanged("USED");
					this.OnUSEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EQUIPMENTREQUEST_SOFTWARE", Storage="_EQUIPMENTREQUEST", ThisKey="EQUIPMENT_REQUEST_NUM", OtherKey="EQUIPMENT_REQUEST_NUM", IsForeignKey=true)]
		public EQUIPMENTREQUEST EQUIPMENTREQUEST
		{
			get
			{
				return this._EQUIPMENTREQUEST.Entity;
			}
			set
			{
				EQUIPMENTREQUEST previousValue = this._EQUIPMENTREQUEST.Entity;
				if (((previousValue != value) 
							|| (this._EQUIPMENTREQUEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EQUIPMENTREQUEST.Entity = null;
						previousValue.SOFTWAREs.Remove(this);
					}
					this._EQUIPMENTREQUEST.Entity = value;
					if ((value != null))
					{
						value.SOFTWAREs.Add(this);
						this._EQUIPMENT_REQUEST_NUM = value.EQUIPMENT_REQUEST_NUM;
					}
					else
					{
						this._EQUIPMENT_REQUEST_NUM = default(int);
					}
					this.SendPropertyChanged("EQUIPMENTREQUEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SUPERVISOR")]
	public partial class SUPERVISOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SUPERVISOR_NUM;
		
		private int _EMPLOYEE_NUM;
		
		private System.Nullable<bool> _CURRENT_AVAILABLE;
		
		private EntitySet<NEWHIRE> _NEWHIREs;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSUPERVISOR_NUMChanging(int value);
    partial void OnSUPERVISOR_NUMChanged();
    partial void OnEMPLOYEE_NUMChanging(int value);
    partial void OnEMPLOYEE_NUMChanged();
    partial void OnCURRENT_AVAILABLEChanging(System.Nullable<bool> value);
    partial void OnCURRENT_AVAILABLEChanged();
    #endregion
		
		public SUPERVISOR()
		{
			this._NEWHIREs = new EntitySet<NEWHIRE>(new Action<NEWHIRE>(this.attach_NEWHIREs), new Action<NEWHIRE>(this.detach_NEWHIREs));
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUPERVISOR_NUM", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SUPERVISOR_NUM
		{
			get
			{
				return this._SUPERVISOR_NUM;
			}
			set
			{
				if ((this._SUPERVISOR_NUM != value))
				{
					this.OnSUPERVISOR_NUMChanging(value);
					this.SendPropertyChanging();
					this._SUPERVISOR_NUM = value;
					this.SendPropertyChanged("SUPERVISOR_NUM");
					this.OnSUPERVISOR_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_NUM", DbType="Int NOT NULL")]
		public int EMPLOYEE_NUM
		{
			get
			{
				return this._EMPLOYEE_NUM;
			}
			set
			{
				if ((this._EMPLOYEE_NUM != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_NUMChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_NUM = value;
					this.SendPropertyChanged("EMPLOYEE_NUM");
					this.OnEMPLOYEE_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CURRENT_AVAILABLE", DbType="Bit")]
		public System.Nullable<bool> CURRENT_AVAILABLE
		{
			get
			{
				return this._CURRENT_AVAILABLE;
			}
			set
			{
				if ((this._CURRENT_AVAILABLE != value))
				{
					this.OnCURRENT_AVAILABLEChanging(value);
					this.SendPropertyChanging();
					this._CURRENT_AVAILABLE = value;
					this.SendPropertyChanged("CURRENT_AVAILABLE");
					this.OnCURRENT_AVAILABLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPERVISOR_NEWHIRE", Storage="_NEWHIREs", ThisKey="EMPLOYEE_NUM", OtherKey="SUPERVISOR_NUM")]
		public EntitySet<NEWHIRE> NEWHIREs
		{
			get
			{
				return this._NEWHIREs;
			}
			set
			{
				this._NEWHIREs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_SUPERVISOR", Storage="_EMPLOYEE", ThisKey="EMPLOYEE_NUM", OtherKey="EMPLOYEE_NUM", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.SUPERVISORs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.SUPERVISORs.Add(this);
						this._EMPLOYEE_NUM = value.EMPLOYEE_NUM;
					}
					else
					{
						this._EMPLOYEE_NUM = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NEWHIREs(NEWHIRE entity)
		{
			this.SendPropertyChanging();
			entity.SUPERVISOR = this;
		}
		
		private void detach_NEWHIREs(NEWHIRE entity)
		{
			this.SendPropertyChanging();
			entity.SUPERVISOR = null;
		}
	}
}
#pragma warning restore 1591
